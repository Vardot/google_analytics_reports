<?php

/**
 * @file
 * Implements the API through which Google Analytics data can be accessed.
 */

use Drupal\file\Entity\File;
use Drupal\google_analytics_reports_api\GoogleAnalyticsReportsApiFeed;
use Google\Analytics\Data\V1beta\BetaAnalyticsDataClient;

/**
 * Instantiate a new GoogleAnalyticsReportsApiFeed object.
 *
 * All API here can be called via this function
 * https://developers.google.com/analytics/devguides/reporting/data/v1
 * Ex: google_analytics_reports_api_gafeed()->runReport(['dateRange' => ...]);.
 *
 * @return object
 *   GoogleAnalyticsReportsApiFeed object to run needed API from
 *   new Analytics API.
 */
function google_analytics_reports_api_gafeed($settings = []) {
  static $mclient;

  if (!$settings && isset($mclient)) {
    return $mclient;
  }

  try {
    $config = $settings
      ? $settings
      : \Drupal::configFactory()
        ->get('google_analytics_reports_api.settings')
        ->get();

    $file = $config['json'] ?? FALSE ? File::load($config['json']) : FALSE;
    $absolute_path = $file
      ? \Drupal::service('stream_wrapper_manager')
        ->getViaUri($file->getFileUri())
        ->realpath()
      : FALSE;

    if (!$absolute_path) {
      return FALSE;
    }

    putenv("GOOGLE_APPLICATION_CREDENTIALS={$absolute_path}");
    $property_id = $config['property'] ?? FALSE;

    if (!$property_id) {
      return FALSE;
    }
    $client = new BetaAnalyticsDataClient();

    $mclient = new GoogleAnalyticsReportsApiFeed($client, $property_id);

    return $mclient;
  }
  catch (\Exception $e) {
    \Drupal::messenger()->addMessage(
      t('There was an authentication error. Message: @message.', [
        '@message' => $e->getMessage(),
      ]),
      'error',
      FALSE
    );
    \Drupal::logger('google_analytics_reports_api')->error(
      'There was an authentication error. Message: @message.',
      ['@message' => $e->getMessage()]
    );
  }
}

/**
 * Sets the expiry timestamp for cached queries.
 *
 * Default is 3 days.
 *
 * @return int
 *   The UNIX timestamp to expire the query at.
 */
function google_analytics_reports_api_cache_time() {
  return time() +
    \Drupal::config('google_analytics_reports_api.settings')->get(
      'cache_length'
    );
}

/**
 * Convert an object to array.
 */
function _to_array($obj) {
  $temp = (array) $obj;
  $array = [];

  foreach ($temp as $k => $v) {
    $k = preg_match('/^\x00(?:.*?)\x00(.+)/', $k, $matches) ? $matches[1] : $k;
    $array[$k] = $v;
  }

  return $array;
}

/**
 * Google Analytics convert dimentrics.
 */
function _ga_convert_dimentrics($field_name, $cb1, $cb2) {
  $available_fields = google_analytics_reports_get_fields();

  if (!$available_fields[$field_name]) {
    return;
  }
  $type = $available_fields[$field_name]->type;

  if ($type === 'DIMENSION') {
    $cb1();
  }
  else {
    $cb2();
  }
}
