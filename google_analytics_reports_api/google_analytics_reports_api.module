<?php

/**
 * @file
 * Implements the API through which Google Analytics data can be accessed.
 */

/**
 * Implements hook_help().
 */
function google_analytics_reports_api_help($path, $arg) {
  switch ($path) {
    case 'admin/help#google_analytics_reports_api':
      $output = '<p>' . t('Google Analytics Reports and it\'s API module provides site administrators and programmers a rich API to generate graphical reports based on Google Analytics data.  The reports module includes a helpful sitewide report located under <a href="!link">Drupal\'s default administrator reports</a>, and blocks for both sitewide and path-based reports.', array(
        '!link' => url('admin/reports'),
      )) . '</p>';
      $output .= '<p>' . t('Programmers can build complex queries against Google Analytics and display them in any format they like.  To get started coding your own reports, visit the <a href="!link">Google Analytics Reports documentation page on drupal.org</a>.', array(
        '!link' => url('https://www.drupal.org/node/1138274'),
      )) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function google_analytics_reports_api_menu() {
  $items['admin/config/system/google-analytics-reports-api'] = array(
    'title' => 'Google Analytics Reports API',
    'description' => 'Configure your account, profiles, and reports.',
    'page callback' => 'drupal_get_form',
    'file' => 'google_analytics_reports_api.pages.inc',
    'page arguments' => array('google_analytics_reports_api_admin'),
    'access arguments' => array('administer google analytics reports api'),
  );

  // OAuth callback from Google.
  $items['google-analytics-reports/oauth'] = array(
    'title' => 'Google Analytics Reports API OAuth Callback',
    'access callback' => TRUE,
    'page callback' => 'google_analytics_reports_api_oauth_callback',
    'type' => MENU_CALLBACK,
    'file' => 'google_analytics_reports_api.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function google_analytics_reports_api_permission() {
  return array(
    'administer google analytics reports api' => array(
      'title' => t('administer google analytics reports api'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function google_analytics_reports_api_theme() {
  return array(
    'google_analytics_reports_api_profile_label' => array(
      'arguments' => array(
        'profile' => NULL,
      ),
    ),
  );
}

/**
 * Instantiate a new GoogleAnalyticsReportsApiFeed object.
 *
 * @return object
 *   GoogleAnalyticsReportsApiFeed object to authorize access and request data
 *   from the Google Analytics Core Reporting API.
 */
function google_analytics_reports_api_new_gafeed() {
  $key = variable_get('google_analytics_reports_api_consumer_key', 'anonymous');
  $secret = variable_get('google_analytics_reports_api_consumer_secret', 'anonymous');
  $oauth_token = variable_get('google_analytics_reports_api_oauth_token', NULL);
  $oauth_token_secret = variable_get('google_analytics_reports_api_oauth_token_secret', NULL);
  return new GoogleAnalyticsReportsApiFeed($key, $secret, $oauth_token, $oauth_token_secret);
}

/**
 * Request report data.
 *
 * @param array $params
 *   An associative array containing:
 *   - profile_id: required
 *    [default=variable_get('google_analytics_reports_api_profile_id')].
 *   - metrics: required.
 *   - dimensions: optional [default=none].
 *   - sort_metric: optional [default=none].
 *   - filters: optional [default=none].
 *   - segment: optional [default=none].
 *   - start_date: optional [default=2005-01-01].
 *   - end_date: optional [default=today].
 *   - start_index: optional [default=1].
 *   - max_results: optional [default=10,000].
 * @param array $cache_options
 *   An optional associative array containing:
 *   - cid: optional [default=md5 hash].
 *   - expire: optional [default=CACHE_TEMPORARY].
 *   - refresh: optional [default=FALSE].
 *
 * @return object
 *   GoogleAnalyticsReportsApiFeed object to authorize access and request data
 *   from the Google Analytics Core Reporting API after reporting data.
 */
function google_analytics_reports_api_report_data($params = array(), $cache_options = array()) {

  $params_defaults = array(
    'profile_id' => 'ga:' . variable_get('google_analytics_reports_api_profile_id', 0),
  );

  $params += $params_defaults;

  $ga_feed = google_analytics_reports_api_new_gafeed();
  $ga_feed->queryReportFeed($params, $cache_options);

  return $ga_feed;
}

/**
 * Programmatically revoke token.
 */
function google_analytics_reports_api_revoke() {
  $ga_feed = google_analytics_reports_api_new_gafeed();
  $ga_feed->revokeToken();
  // Delete module variables.
  db_delete('variable')
    ->condition('name', 'google_analytics_reports_api_%', 'LIKE')
    ->execute();
}

/**
 * Sets the expiry timestamp for cached queries.
 *
 * Default is 3 days.
 *
 * @return int
 *   The UNIX timestamp to expire the query at.
 */
function google_analytics_reports_api_cache_time() {
  return time() + variable_get('google_analytics_reports_api_cache_length', 259200);
}

/**
 * Returns HTML for the full string label of profiles.
 *
 * @param array $variables
 *   An associative array containing:
 *   - profile: Google Analytics profile object.
 *
 * @ingroup themeable
 */
function theme_google_analytics_reports_api_profile_label($variables) {
  return $variables['profile']->name . ' (' . $variables['profile']->id . ')';
}

/**
 * Implements hook_domain_conf().
 */
function google_analytics_reports_api_domain_conf() {
  $profile_id = variable_get('google_analytics_reports_api_profile_id', 0);
  $form['google_analytics_reports_api'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Analytics Reports API'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  if ($profile_id) {
    $admin_form = google_analytics_reports_api_admin();
    $form['google_analytics_reports_api']['google_analytics_reports_api_profile_id'] = $admin_form['ga']['google_analytics_reports_api_profile_id'];
    $form['google_analytics_reports_api']['google_analytics_reports_api_profile_id']['#description'] = t('Choose your Google Analytics profile.');
  }
  else {
    $form['google_analytics_reports_api']['authorize']['#markup'] = '<p>' . t('You must <a href="!url">authorize</a> Drupal to use your Analytics account before you can view reports.', array('!url' => url('admin/config/system/google-analytics-reports-api'))) . '</p>';
  }
  return $form;
}
